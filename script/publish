#!/usr/bin/env python

"""
Publish and tag a given file, with title and body extracted from the HTML
markup of the file.  The corresponding draft page, if any, will be deleted if
the publish request succeed.

Usage: publish [-l] [-t tagstring] [-f] filepath

By default, requests are made to {APPID}.appspot.com. The script will fail if
content already exists on the given path.

Options:
	-l    make requests to localhost:8080
	-t    use the supplied tags, which should be given as a comma-separated string
	-f    force update
"""

import BeautifulSoup
import datetime
import getopt
import os
import sys

host = None
forced = False
tags = []

opts, args = getopt.getopt(sys.argv[1:], 'flt:')
for o, v in opts:
	if o == '-l':
		host = 'localhost:8080'
	elif o == '-t':
		tags = set(map(unicode, v.split(',')))
	elif o == '-f':
		forced = True
filename = args[0]

import remote
remote.attach(host)

from google.appengine.api import memcache

import models
import static


path = '/'+os.path.basename(filename)

soup = BeautifulSoup.BeautifulSoup(open(filename).read())
body = u''.join(unicode(s) for s in soup.body.contents if s)

post = models.BlogPost.gql('WHERE path = :1', path).get()
if post:
	if forced:
		post.title = unicode(soup.title.string)
		if tags:
			post.tags = tags
		post.body = body
	else:
		sys.exit("error: content exists on path %s, use -f to force write" % path)
else:
	post = models.BlogPost(
			path=path,
			title=unicode(soup.title.string),
			body=body,
			tags=tags,
			published=datetime.datetime.now()
		)

post.put()
post.publish()

draftpath = '/draft'+path
draft = static.get(draftpath)
if draft:
	draft.delete()
	memcache.delete(draftpath)
